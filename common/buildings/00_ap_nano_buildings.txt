building_pop_produce_nano_1 = {
	base_buildtime = @b1_time
	category = manufacturing
	icon = building_pop_produce_nano_1

	potential = {
		NOR = {
			has_modifier = resort_colony
			has_modifier = slave_colony
		}
		owner = {
			is_ai = no
			has_technology = tech_fallen_lost_nano_machine
		}
	}
	prerequisites = { tech_fallen_lost_nano_machine }

	destroy_trigger = {
		OR = {
			has_modifier = resort_colony
			has_modifier = slave_colony
		}
	}

	triggered_planet_modifier = {
		potential = {
			owner = {
				is_gestalt = no
			}
		}
		job_nano_maker_add = @b1_jobs
	}

	triggered_planet_modifier = {
		potential = {
			owner = {
				is_gestalt = yes
			}
		}
		job_gestal_nano_maker_add = @b1_jobs
	}

	resources = {
		category = planet_buildings
		cost = {
			minerals = @b1_minerals
		}
		upkeep = {
			energy = @b1_upkeep
		}
	}

	upgrades = {
		building_pop_produce_nano_2
	}
}

building_pop_produce_nano_2 = {
	base_buildtime = @b2_time
	can_build = no
	category = manufacturing
	icon = building_pop_produce_nano_2

	potential = {
		NOR = {
			has_modifier = resort_colony
			has_modifier = slave_colony
		}
	}

	allow = {
		has_upgraded_capital = yes
	}

	destroy_trigger = {
		OR = {
			has_modifier = resort_colony
			has_modifier = slave_colony
		}
	}

	triggered_planet_modifier = {
		potential = {
			owner = {
				is_gestalt = no
			}
		}
		job_nano_maker_add = @b2_jobs
	}

	triggered_planet_modifier = {
		potential = {
			owner = {
				is_gestalt = yes
			}
		}
		job_gestal_nano_maker_add = @b2_jobs
	}

	resources = {
		category = planet_buildings
		cost = {
			minerals = @b2_minerals
			volatile_motes = @b2_rare_cost
		}
		upkeep = {
			energy = @b2_upkeep
			volatile_motes = @b2_rare_upkeep
		}
	}

	upgrades = {
		building_pop_produce_nano_3
	}
}

building_pop_produce_nano_3 = {
	base_buildtime = @b3_time
	can_build = no
	category = manufacturing
	icon = building_pop_produce_nano_3

	potential = {
		NOR = {
			has_modifier = resort_colony
			has_modifier = slave_colony
		}
	}

	allow = {
		has_major_upgraded_capital = yes
	}

	destroy_trigger = {
		OR = {
			has_modifier = resort_colony
			has_modifier = slave_colony
		}
	}

	triggered_planet_modifier = {
		potential = {
			owner = {
				is_gestalt = no
			}
		}
		job_nano_maker_add = @b3_jobs
	}

	triggered_planet_modifier = {
		potential = {
			owner = {
				is_gestalt = yes
			}
		}
		job_gestal_nano_maker_add = @b3_jobs
	}

	resources = {
		category = planet_buildings
		cost = {
			minerals = @b3_minerals
			volatile_motes = @b3_rare_cost
		}
		upkeep = {
			energy = @b3_upkeep
			volatile_motes = @b3_rare_upkeep
		}
	}
}

building_new_organic_paradise_for_fallen_machine = {
	base_buildtime = @b2_time
	icon = building_paradise_dome
	can_demolish = no

	category = unity

	potential = {
		exists = owner
		owner = { has_country_flag = fallen_machine_empire_awaken_yunfan }
	}

	destroy_trigger = {
		exists = owner
		NOT = { owner = { has_country_flag = fallen_machine_empire_awaken_yunfan } }
	}

	convert_to = {
		building_paradise_dome
		building_communal_housing_large
	}

	planet_modifier = {
		job_bio_trophy_add = 40
		job_fe_maintenance_bot_add = 3
	}

	resources = {
		category = planet_buildings
		cost = {
			minerals = @b2_minerals
			exotic_gases = @b2_rare_cost
		}
		upkeep = {
			energy = @b2_upkeep
			exotic_gases = @b2_rare_upkeep
		}
	}

	triggered_desc = {
		text = job_bio_trophy_effect_desc
	}

	show_tech_unlock_if = {
		owner = { has_country_flag = fallen_machine_empire_awaken_yunfan }
	}

	ai_weight_coefficient = 1.2

	# Here we try to adress the second issue that the AI cant evaluate the pop job output of the bio trophy given the happiness trigger that was put inplace to guard against players exploiting bio trophies

	#science
	ai_resource_production = {
		unity = 20
		physics_research = 20

		trigger = {
			has_unemployed_pop_of_category = bio_trophy

			planet_resource_compare = {
				resource = physics_research
				value >= 100
				type = produces
			}
		}
	}

	#alloys
	ai_resource_production = {
		unity = 20
		alloys = 20

		trigger = {
			has_unemployed_pop_of_category = bio_trophy

			planet_resource_compare = {
				resource = alloys
				value >= 100
				type = produces
			}
		}
	}

	#cgs
	ai_resource_production = {
		unity = 20
		consumer_goods = 20

		trigger = {
			has_unemployed_pop_of_category = bio_trophy

			planet_resource_compare = {
				resource = consumer_goods
				value >= 100
				type = produces
			}
		}
	}
}